plugins {
    id 'java-library'
    // To create a shadow/fat jar, including dependencies
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

repositories {
    // Use this only for local development!
//  mavenLocal()

    mavenCentral()

    maven {
        url "https://maven.scijava.org/content/repositories/releases"
    }

    maven {
        url "https://maven.scijava.org/content/repositories/snapshots"
    }

}

ext.moduleName = 'qupath.extension.biop'

description = 'QuPath extension containing utilitiy functions by the BIOP, Including the ABBA Bridge between QuPath and Fiji'

version = "1.0.4"

dependencies {
    def qupathVersion = "0.3.2" // For now

    shadow "io.github.qupath:qupath-gui-fx:${qupathVersion}"
    shadow "org.slf4j:slf4j-api:1.7.30"
    implementation 'net.imglib2:imglib2-realtransform:3.1.1'
    implementation 'com.google.code.gson:gson:2.8.8'

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

}

processResources {
    from("${projectDir}/LICENSE.txt") {
        into 'licenses/'
    }
}

tasks.register("copyDependencies", Copy) {
    description "Copy dependencies into the build directory for use elsewhere"
    group "QuPath"

    from configurations.default
    into 'build/libs'
}

/*
 * Ensure Java 11 compatibility
 */
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    if (project.properties['sources'])
        withSourcesJar()
    if (project.properties['javadocs'])
        withJavadocJar()
}

javadoc {
    options.addBooleanOption('html5', true)
    destinationDir = new File(project.rootDir,"docs")
}

/*
 * Create javadocs for all modules/packages in one place.
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
def strictJavadoc = findProperty('strictJavadoc')
if (!strictJavadoc) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

jar {
    // Important to set version so this can be queried within QuPath
    manifest {
        def manifestAttributes = [
                "Implementation-Vendor": "QuPath developers",
                "Implementation-Version": project.version,
                //               'Automatic-Module-Name': "io.github." + moduleName,
                "QuPath-build-time": new Date().format("yyyy-MM-dd, HH:mm")
        ]

        attributes(manifestAttributes)
    }
}

/*
 * Avoid 'Entry .gitkeep is a duplicate but no duplicate handling strategy has been set.'
 * when using withSourcesJar()
 */
tasks.withType(org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named('test') {
    useJUnitPlatform()
}